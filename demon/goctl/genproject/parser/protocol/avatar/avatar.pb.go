// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: avatar.proto

package avatar

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OssType int32

const (
	OssType_OSS_TYPE_UNDEFINED OssType = 0
	OssType_ALIYUN             OssType = 1 // 目前只有一个,预留字段
)

// Enum value maps for OssType.
var (
	OssType_name = map[int32]string{
		0: "OSS_TYPE_UNDEFINED",
		1: "ALIYUN",
	}
	OssType_value = map[string]int32{
		"OSS_TYPE_UNDEFINED": 0,
		"ALIYUN":             1,
	}
)

func (x OssType) Enum() *OssType {
	p := new(OssType)
	*p = x
	return p
}

func (x OssType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OssType) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[0].Descriptor()
}

func (OssType) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[0]
}

func (x OssType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OssType.Descriptor instead.
func (OssType) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{0}
}

type AvatarType int32

const (
	AvatarType_AVATAR_TYPE_UNDEFINED AvatarType = 0
	AvatarType_USER                  AvatarType = 1 //user avatar
	AvatarType_GROUP                 AvatarType = 2 // group avatar
	AvatarType_CHANNEL               AvatarType = 3 //channel avatar
)

// Enum value maps for AvatarType.
var (
	AvatarType_name = map[int32]string{
		0: "AVATAR_TYPE_UNDEFINED",
		1: "USER",
		2: "GROUP",
		3: "CHANNEL",
	}
	AvatarType_value = map[string]int32{
		"AVATAR_TYPE_UNDEFINED": 0,
		"USER":                  1,
		"GROUP":                 2,
		"CHANNEL":               3,
	}
)

func (x AvatarType) Enum() *AvatarType {
	p := new(AvatarType)
	*p = x
	return p
}

func (x AvatarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarType) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[1].Descriptor()
}

func (AvatarType) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[1]
}

func (x AvatarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarType.Descriptor instead.
func (AvatarType) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{1}
}

type DownloadUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResizeUrl string `protobuf:"bytes,1,opt,name=resize_url,json=resizeUrl,proto3" json:"resize_url,omitempty"`
	CircleUrl string `protobuf:"bytes,2,opt,name=circle_url,json=circleUrl,proto3" json:"circle_url,omitempty"`
	RawUrl    string `protobuf:"bytes,3,opt,name=raw_url,json=rawUrl,proto3" json:"raw_url,omitempty"`          // 原图
	ObjectKey string `protobuf:"bytes,4,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"` // 存在oss里的key(a.k.a 头像版本)
}

func (x *DownloadUrl) Reset() {
	*x = DownloadUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadUrl) ProtoMessage() {}

func (x *DownloadUrl) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadUrl.ProtoReflect.Descriptor instead.
func (*DownloadUrl) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{0}
}

func (x *DownloadUrl) GetResizeUrl() string {
	if x != nil {
		return x.ResizeUrl
	}
	return ""
}

func (x *DownloadUrl) GetCircleUrl() string {
	if x != nil {
		return x.CircleUrl
	}
	return ""
}

func (x *DownloadUrl) GetRawUrl() string {
	if x != nil {
		return x.RawUrl
	}
	return ""
}

func (x *DownloadUrl) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

type GetAvatarUploadUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid        uint64     `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"` // 根据不同类型传不同id
	AvatarType AvatarType `protobuf:"varint,2,opt,name=avatar_type,json=avatarType,proto3,enum=gather.toolkitcl.protocol.AvatarType" json:"avatar_type,omitempty"`
}

func (x *GetAvatarUploadUrlReq) Reset() {
	*x = GetAvatarUploadUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvatarUploadUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvatarUploadUrlReq) ProtoMessage() {}

func (x *GetAvatarUploadUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvatarUploadUrlReq.ProtoReflect.Descriptor instead.
func (*GetAvatarUploadUrlReq) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{1}
}

func (x *GetAvatarUploadUrlReq) GetVid() uint64 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *GetAvatarUploadUrlReq) GetAvatarType() AvatarType {
	if x != nil {
		return x.AvatarType
	}
	return AvatarType_AVATAR_TYPE_UNDEFINED
}

type GetAvatarUploadUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadUrl    string `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	UploadExpire uint64 `protobuf:"varint,2,opt,name=upload_expire,json=uploadExpire,proto3" json:"upload_expire,omitempty"`
	ObjectKey    string `protobuf:"bytes,3,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"`
}

func (x *GetAvatarUploadUrlResp) Reset() {
	*x = GetAvatarUploadUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvatarUploadUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvatarUploadUrlResp) ProtoMessage() {}

func (x *GetAvatarUploadUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvatarUploadUrlResp.ProtoReflect.Descriptor instead.
func (*GetAvatarUploadUrlResp) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{2}
}

func (x *GetAvatarUploadUrlResp) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *GetAvatarUploadUrlResp) GetUploadExpire() uint64 {
	if x != nil {
		return x.UploadExpire
	}
	return 0
}

func (x *GetAvatarUploadUrlResp) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

type SaveAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid        uint64     `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"` // 根据不同类型传不同id
	AvatarType AvatarType `protobuf:"varint,2,opt,name=avatar_type,json=avatarType,proto3,enum=gather.toolkitcl.protocol.AvatarType" json:"avatar_type,omitempty"`
	ObjectKey  string     `protobuf:"bytes,3,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"`
}

func (x *SaveAvatarReq) Reset() {
	*x = SaveAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAvatarReq) ProtoMessage() {}

func (x *SaveAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAvatarReq.ProtoReflect.Descriptor instead.
func (*SaveAvatarReq) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{3}
}

func (x *SaveAvatarReq) GetVid() uint64 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *SaveAvatarReq) GetAvatarType() AvatarType {
	if x != nil {
		return x.AvatarType
	}
	return AvatarType_AVATAR_TYPE_UNDEFINED
}

func (x *SaveAvatarReq) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

type SaveAvatarResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl *DownloadUrl `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
}

func (x *SaveAvatarResp) Reset() {
	*x = SaveAvatarResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAvatarResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAvatarResp) ProtoMessage() {}

func (x *SaveAvatarResp) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAvatarResp.ProtoReflect.Descriptor instead.
func (*SaveAvatarResp) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{4}
}

func (x *SaveAvatarResp) GetDownloadUrl() *DownloadUrl {
	if x != nil {
		return x.DownloadUrl
	}
	return nil
}

type GetAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid           uint64     `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"` // 根据不同类型传不同id
	AvatarType    AvatarType `protobuf:"varint,2,opt,name=avatar_type,json=avatarType,proto3,enum=gather.toolkitcl.protocol.AvatarType" json:"avatar_type,omitempty"`
	ObjectKeyOnly bool       `protobuf:"varint,3,opt,name=object_key_only,json=objectKeyOnly,proto3" json:"object_key_only,omitempty"`
}

func (x *GetAvatarReq) Reset() {
	*x = GetAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvatarReq) ProtoMessage() {}

func (x *GetAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvatarReq.ProtoReflect.Descriptor instead.
func (*GetAvatarReq) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{5}
}

func (x *GetAvatarReq) GetVid() uint64 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *GetAvatarReq) GetAvatarType() AvatarType {
	if x != nil {
		return x.AvatarType
	}
	return AvatarType_AVATAR_TYPE_UNDEFINED
}

func (x *GetAvatarReq) GetObjectKeyOnly() bool {
	if x != nil {
		return x.ObjectKeyOnly
	}
	return false
}

type GetAvatarResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl *DownloadUrl `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"` //key为规格 value为下载连接
}

func (x *GetAvatarResp) Reset() {
	*x = GetAvatarResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvatarResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvatarResp) ProtoMessage() {}

func (x *GetAvatarResp) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvatarResp.ProtoReflect.Descriptor instead.
func (*GetAvatarResp) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{6}
}

func (x *GetAvatarResp) GetDownloadUrl() *DownloadUrl {
	if x != nil {
		return x.DownloadUrl
	}
	return nil
}

type BatchGetAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VidList       []uint64   `protobuf:"varint,1,rep,packed,name=vid_list,json=vidList,proto3" json:"vid_list,omitempty"`
	AvatarType    AvatarType `protobuf:"varint,2,opt,name=avatar_type,json=avatarType,proto3,enum=gather.toolkitcl.protocol.AvatarType" json:"avatar_type,omitempty"`
	ObjectKeyOnly bool       `protobuf:"varint,3,opt,name=object_key_only,json=objectKeyOnly,proto3" json:"object_key_only,omitempty"`
}

func (x *BatchGetAvatarReq) Reset() {
	*x = BatchGetAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetAvatarReq) ProtoMessage() {}

func (x *BatchGetAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetAvatarReq.ProtoReflect.Descriptor instead.
func (*BatchGetAvatarReq) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{7}
}

func (x *BatchGetAvatarReq) GetVidList() []uint64 {
	if x != nil {
		return x.VidList
	}
	return nil
}

func (x *BatchGetAvatarReq) GetAvatarType() AvatarType {
	if x != nil {
		return x.AvatarType
	}
	return AvatarType_AVATAR_TYPE_UNDEFINED
}

func (x *BatchGetAvatarReq) GetObjectKeyOnly() bool {
	if x != nil {
		return x.ObjectKeyOnly
	}
	return false
}

type BatchGetAvatarResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrlList map[uint64]*DownloadUrl `protobuf:"bytes,1,rep,name=download_url_list,json=downloadUrlList,proto3" json:"download_url_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetAvatarResp) Reset() {
	*x = BatchGetAvatarResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetAvatarResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetAvatarResp) ProtoMessage() {}

func (x *BatchGetAvatarResp) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetAvatarResp.ProtoReflect.Descriptor instead.
func (*BatchGetAvatarResp) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{8}
}

func (x *BatchGetAvatarResp) GetDownloadUrlList() map[uint64]*DownloadUrl {
	if x != nil {
		return x.DownloadUrlList
	}
	return nil
}

var File_avatar_proto protoreflect.FileDescriptor

var file_avatar_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x55, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x22,
	0x71, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x7b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x22,
	0x88, 0x01, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x76, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x0e, 0x53, 0x61,
	0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0c,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c,
	0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x5a, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b,
	0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e,
	0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x6a,
	0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x2d, 0x0a, 0x07, 0x4f, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x4c, 0x49, 0x59, 0x55, 0x4e, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x0a, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x56, 0x41, 0x54, 0x41,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x10, 0x03, 0x32, 0xb5, 0x03, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74,
	0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x0a, 0x53, 0x61,
	0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c,
	0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x27, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a,
	0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x2c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0f, 0x5a, 0x0d,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x3b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_avatar_proto_rawDescOnce sync.Once
	file_avatar_proto_rawDescData = file_avatar_proto_rawDesc
)

func file_avatar_proto_rawDescGZIP() []byte {
	file_avatar_proto_rawDescOnce.Do(func() {
		file_avatar_proto_rawDescData = protoimpl.X.CompressGZIP(file_avatar_proto_rawDescData)
	})
	return file_avatar_proto_rawDescData
}

var file_avatar_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_avatar_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_avatar_proto_goTypes = []interface{}{
	(OssType)(0),                   // 0: gather.toolkitcl.protocol.OssType
	(AvatarType)(0),                // 1: gather.toolkitcl.protocol.AvatarType
	(*DownloadUrl)(nil),            // 2: gather.toolkitcl.protocol.DownloadUrl
	(*GetAvatarUploadUrlReq)(nil),  // 3: gather.toolkitcl.protocol.GetAvatarUploadUrlReq
	(*GetAvatarUploadUrlResp)(nil), // 4: gather.toolkitcl.protocol.GetAvatarUploadUrlResp
	(*SaveAvatarReq)(nil),          // 5: gather.toolkitcl.protocol.SaveAvatarReq
	(*SaveAvatarResp)(nil),         // 6: gather.toolkitcl.protocol.SaveAvatarResp
	(*GetAvatarReq)(nil),           // 7: gather.toolkitcl.protocol.GetAvatarReq
	(*GetAvatarResp)(nil),          // 8: gather.toolkitcl.protocol.GetAvatarResp
	(*BatchGetAvatarReq)(nil),      // 9: gather.toolkitcl.protocol.BatchGetAvatarReq
	(*BatchGetAvatarResp)(nil),     // 10: gather.toolkitcl.protocol.BatchGetAvatarResp
	nil,                            // 11: gather.toolkitcl.protocol.BatchGetAvatarResp.DownloadUrlListEntry
}
var file_avatar_proto_depIdxs = []int32{
	1,  // 0: gather.toolkitcl.protocol.GetAvatarUploadUrlReq.avatar_type:type_name -> gather.toolkitcl.protocol.AvatarType
	1,  // 1: gather.toolkitcl.protocol.SaveAvatarReq.avatar_type:type_name -> gather.toolkitcl.protocol.AvatarType
	2,  // 2: gather.toolkitcl.protocol.SaveAvatarResp.download_url:type_name -> gather.toolkitcl.protocol.DownloadUrl
	1,  // 3: gather.toolkitcl.protocol.GetAvatarReq.avatar_type:type_name -> gather.toolkitcl.protocol.AvatarType
	2,  // 4: gather.toolkitcl.protocol.GetAvatarResp.download_url:type_name -> gather.toolkitcl.protocol.DownloadUrl
	1,  // 5: gather.toolkitcl.protocol.BatchGetAvatarReq.avatar_type:type_name -> gather.toolkitcl.protocol.AvatarType
	11, // 6: gather.toolkitcl.protocol.BatchGetAvatarResp.download_url_list:type_name -> gather.toolkitcl.protocol.BatchGetAvatarResp.DownloadUrlListEntry
	2,  // 7: gather.toolkitcl.protocol.BatchGetAvatarResp.DownloadUrlListEntry.value:type_name -> gather.toolkitcl.protocol.DownloadUrl
	3,  // 8: gather.toolkitcl.protocol.Avatar.GetAvatarUploadUrl:input_type -> gather.toolkitcl.protocol.GetAvatarUploadUrlReq
	5,  // 9: gather.toolkitcl.protocol.Avatar.SaveAvatar:input_type -> gather.toolkitcl.protocol.SaveAvatarReq
	7,  // 10: gather.toolkitcl.protocol.Avatar.GetAvatar:input_type -> gather.toolkitcl.protocol.GetAvatarReq
	9,  // 11: gather.toolkitcl.protocol.Avatar.BatchGetAvatar:input_type -> gather.toolkitcl.protocol.BatchGetAvatarReq
	4,  // 12: gather.toolkitcl.protocol.Avatar.GetAvatarUploadUrl:output_type -> gather.toolkitcl.protocol.GetAvatarUploadUrlResp
	6,  // 13: gather.toolkitcl.protocol.Avatar.SaveAvatar:output_type -> gather.toolkitcl.protocol.SaveAvatarResp
	8,  // 14: gather.toolkitcl.protocol.Avatar.GetAvatar:output_type -> gather.toolkitcl.protocol.GetAvatarResp
	10, // 15: gather.toolkitcl.protocol.Avatar.BatchGetAvatar:output_type -> gather.toolkitcl.protocol.BatchGetAvatarResp
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_avatar_proto_init() }
func file_avatar_proto_init() {
	if File_avatar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_avatar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvatarUploadUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvatarUploadUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAvatarResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvatarResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAvatarResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_avatar_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_avatar_proto_goTypes,
		DependencyIndexes: file_avatar_proto_depIdxs,
		EnumInfos:         file_avatar_proto_enumTypes,
		MessageInfos:      file_avatar_proto_msgTypes,
	}.Build()
	File_avatar_proto = out.File
	file_avatar_proto_rawDesc = nil
	file_avatar_proto_goTypes = nil
	file_avatar_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AvatarClient is the client API for Avatar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AvatarClient interface {
	GetAvatarUploadUrl(ctx context.Context, in *GetAvatarUploadUrlReq, opts ...grpc.CallOption) (*GetAvatarUploadUrlResp, error)
	SaveAvatar(ctx context.Context, in *SaveAvatarReq, opts ...grpc.CallOption) (*SaveAvatarResp, error)
	GetAvatar(ctx context.Context, in *GetAvatarReq, opts ...grpc.CallOption) (*GetAvatarResp, error)
	BatchGetAvatar(ctx context.Context, in *BatchGetAvatarReq, opts ...grpc.CallOption) (*BatchGetAvatarResp, error)
}

type avatarClient struct {
	cc grpc.ClientConnInterface
}

func NewAvatarClient(cc grpc.ClientConnInterface) AvatarClient {
	return &avatarClient{cc}
}

func (c *avatarClient) GetAvatarUploadUrl(ctx context.Context, in *GetAvatarUploadUrlReq, opts ...grpc.CallOption) (*GetAvatarUploadUrlResp, error) {
	out := new(GetAvatarUploadUrlResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Avatar/GetAvatarUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarClient) SaveAvatar(ctx context.Context, in *SaveAvatarReq, opts ...grpc.CallOption) (*SaveAvatarResp, error) {
	out := new(SaveAvatarResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Avatar/SaveAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarClient) GetAvatar(ctx context.Context, in *GetAvatarReq, opts ...grpc.CallOption) (*GetAvatarResp, error) {
	out := new(GetAvatarResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Avatar/GetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarClient) BatchGetAvatar(ctx context.Context, in *BatchGetAvatarReq, opts ...grpc.CallOption) (*BatchGetAvatarResp, error) {
	out := new(BatchGetAvatarResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Avatar/BatchGetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvatarServer is the server API for Avatar service.
type AvatarServer interface {
	GetAvatarUploadUrl(context.Context, *GetAvatarUploadUrlReq) (*GetAvatarUploadUrlResp, error)
	SaveAvatar(context.Context, *SaveAvatarReq) (*SaveAvatarResp, error)
	GetAvatar(context.Context, *GetAvatarReq) (*GetAvatarResp, error)
	BatchGetAvatar(context.Context, *BatchGetAvatarReq) (*BatchGetAvatarResp, error)
}

// UnimplementedAvatarServer can be embedded to have forward compatible implementations.
type UnimplementedAvatarServer struct {
}

func (*UnimplementedAvatarServer) GetAvatarUploadUrl(context.Context, *GetAvatarUploadUrlReq) (*GetAvatarUploadUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarUploadUrl not implemented")
}
func (*UnimplementedAvatarServer) SaveAvatar(context.Context, *SaveAvatarReq) (*SaveAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAvatar not implemented")
}
func (*UnimplementedAvatarServer) GetAvatar(context.Context, *GetAvatarReq) (*GetAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatar not implemented")
}
func (*UnimplementedAvatarServer) BatchGetAvatar(context.Context, *BatchGetAvatarReq) (*BatchGetAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetAvatar not implemented")
}

func RegisterAvatarServer(s *grpc.Server, srv AvatarServer) {
	s.RegisterService(&_Avatar_serviceDesc, srv)
}

func _Avatar_GetAvatarUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarUploadUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServer).GetAvatarUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Avatar/GetAvatarUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServer).GetAvatarUploadUrl(ctx, req.(*GetAvatarUploadUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatar_SaveAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServer).SaveAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Avatar/SaveAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServer).SaveAvatar(ctx, req.(*SaveAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatar_GetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServer).GetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Avatar/GetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServer).GetAvatar(ctx, req.(*GetAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatar_BatchGetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServer).BatchGetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Avatar/BatchGetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServer).BatchGetAvatar(ctx, req.(*BatchGetAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Avatar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gather.toolkitcl.protocol.Avatar",
	HandlerType: (*AvatarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvatarUploadUrl",
			Handler:    _Avatar_GetAvatarUploadUrl_Handler,
		},
		{
			MethodName: "SaveAvatar",
			Handler:    _Avatar_SaveAvatar_Handler,
		},
		{
			MethodName: "GetAvatar",
			Handler:    _Avatar_GetAvatar_Handler,
		},
		{
			MethodName: "BatchGetAvatar",
			Handler:    _Avatar_BatchGetAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avatar.proto",
}
