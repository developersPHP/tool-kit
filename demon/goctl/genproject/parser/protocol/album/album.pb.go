// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: album.proto

package album

import (
	avatar "avatar"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AlbumPrivacy int32

const (
	AlbumPrivacy_ALBUM_PRIVACY_UNDEFINED AlbumPrivacy = 0
	AlbumPrivacy_OPEN                    AlbumPrivacy = 1
	AlbumPrivacy_CLOSE                   AlbumPrivacy = 2
)

// Enum value maps for AlbumPrivacy.
var (
	AlbumPrivacy_name = map[int32]string{
		0: "ALBUM_PRIVACY_UNDEFINED",
		1: "OPEN",
		2: "CLOSE",
	}
	AlbumPrivacy_value = map[string]int32{
		"ALBUM_PRIVACY_UNDEFINED": 0,
		"OPEN":                    1,
		"CLOSE":                   2,
	}
)

func (x AlbumPrivacy) Enum() *AlbumPrivacy {
	p := new(AlbumPrivacy)
	*p = x
	return p
}

func (x AlbumPrivacy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlbumPrivacy) Descriptor() protoreflect.EnumDescriptor {
	return file_album_proto_enumTypes[0].Descriptor()
}

func (AlbumPrivacy) Type() protoreflect.EnumType {
	return &file_album_proto_enumTypes[0]
}

func (x AlbumPrivacy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlbumPrivacy.Descriptor instead.
func (AlbumPrivacy) EnumDescriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{0}
}

type GetAlbumUploadUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PhotoNum uint32 `protobuf:"varint,2,opt,name=photo_num,json=photoNum,proto3" json:"photo_num,omitempty"`
}

func (x *GetAlbumUploadUrlReq) Reset() {
	*x = GetAlbumUploadUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumUploadUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumUploadUrlReq) ProtoMessage() {}

func (x *GetAlbumUploadUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumUploadUrlReq.ProtoReflect.Descriptor instead.
func (*GetAlbumUploadUrlReq) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{0}
}

func (x *GetAlbumUploadUrlReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetAlbumUploadUrlReq) GetPhotoNum() uint32 {
	if x != nil {
		return x.PhotoNum
	}
	return 0
}

type UrlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ExpireTime uint64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	ObjectKey  string `protobuf:"bytes,3,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"`
}

func (x *UrlInfo) Reset() {
	*x = UrlInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlInfo) ProtoMessage() {}

func (x *UrlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlInfo.ProtoReflect.Descriptor instead.
func (*UrlInfo) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{1}
}

func (x *UrlInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UrlInfo) GetExpireTime() uint64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UrlInfo) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

type GetAlbumUploadUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadUrl []*UrlInfo `protobuf:"bytes,1,rep,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
}

func (x *GetAlbumUploadUrlResp) Reset() {
	*x = GetAlbumUploadUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumUploadUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumUploadUrlResp) ProtoMessage() {}

func (x *GetAlbumUploadUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumUploadUrlResp.ProtoReflect.Descriptor instead.
func (*GetAlbumUploadUrlResp) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{2}
}

func (x *GetAlbumUploadUrlResp) GetUploadUrl() []*UrlInfo {
	if x != nil {
		return x.UploadUrl
	}
	return nil
}

type SaveAlbumPhotosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       uint64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ObjectKey []string `protobuf:"bytes,2,rep,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"`
}

func (x *SaveAlbumPhotosReq) Reset() {
	*x = SaveAlbumPhotosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAlbumPhotosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAlbumPhotosReq) ProtoMessage() {}

func (x *SaveAlbumPhotosReq) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAlbumPhotosReq.ProtoReflect.Descriptor instead.
func (*SaveAlbumPhotosReq) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{3}
}

func (x *SaveAlbumPhotosReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SaveAlbumPhotosReq) GetObjectKey() []string {
	if x != nil {
		return x.ObjectKey
	}
	return nil
}

type SaveAlbumPhotosResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl   []*UrlInfo        `protobuf:"bytes,1,rep,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	PhotoIdResult map[string]uint64 `protobuf:"bytes,2,rep,name=photo_id_result,json=photoIdResult,proto3" json:"photo_id_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SaveAlbumPhotosResp) Reset() {
	*x = SaveAlbumPhotosResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAlbumPhotosResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAlbumPhotosResp) ProtoMessage() {}

func (x *SaveAlbumPhotosResp) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAlbumPhotosResp.ProtoReflect.Descriptor instead.
func (*SaveAlbumPhotosResp) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{4}
}

func (x *SaveAlbumPhotosResp) GetDownloadUrl() []*UrlInfo {
	if x != nil {
		return x.DownloadUrl
	}
	return nil
}

func (x *SaveAlbumPhotosResp) GetPhotoIdResult() map[string]uint64 {
	if x != nil {
		return x.PhotoIdResult
	}
	return nil
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId  uint64 `protobuf:"varint,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	CreateAt uint64 `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"` // 客户端可以需要按照创建时间分类
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{5}
}

func (x *Photo) GetPhotoId() uint64 {
	if x != nil {
		return x.PhotoId
	}
	return 0
}

func (x *Photo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Photo) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type GetAlbumPhotosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetAlbumPhotosReq) Reset() {
	*x = GetAlbumPhotosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumPhotosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumPhotosReq) ProtoMessage() {}

func (x *GetAlbumPhotosReq) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumPhotosReq.ProtoReflect.Descriptor instead.
func (*GetAlbumPhotosReq) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{6}
}

func (x *GetAlbumPhotosReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetAlbumPhotosResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoInfo []*Photo `protobuf:"bytes,1,rep,name=photo_info,json=photoInfo,proto3" json:"photo_info,omitempty"`
}

func (x *GetAlbumPhotosResp) Reset() {
	*x = GetAlbumPhotosResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumPhotosResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumPhotosResp) ProtoMessage() {}

func (x *GetAlbumPhotosResp) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumPhotosResp.ProtoReflect.Descriptor instead.
func (*GetAlbumPhotosResp) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{7}
}

func (x *GetAlbumPhotosResp) GetPhotoInfo() []*Photo {
	if x != nil {
		return x.PhotoInfo
	}
	return nil
}

type GetAlbumPhotosBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []uint64 `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
}

func (x *GetAlbumPhotosBatchReq) Reset() {
	*x = GetAlbumPhotosBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumPhotosBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumPhotosBatchReq) ProtoMessage() {}

func (x *GetAlbumPhotosBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumPhotosBatchReq.ProtoReflect.Descriptor instead.
func (*GetAlbumPhotosBatchReq) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{8}
}

func (x *GetAlbumPhotosBatchReq) GetUids() []uint64 {
	if x != nil {
		return x.Uids
	}
	return nil
}

type PhotoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoInfo []*Photo `protobuf:"bytes,1,rep,name=photo_info,json=photoInfo,proto3" json:"photo_info,omitempty"`
}

func (x *PhotoList) Reset() {
	*x = PhotoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoList) ProtoMessage() {}

func (x *PhotoList) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoList.ProtoReflect.Descriptor instead.
func (*PhotoList) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{9}
}

func (x *PhotoList) GetPhotoInfo() []*Photo {
	if x != nil {
		return x.PhotoInfo
	}
	return nil
}

type GetAlbumPhotosBatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotosMap map[uint64]*PhotoList `protobuf:"bytes,1,rep,name=photos_map,json=photosMap,proto3" json:"photos_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAlbumPhotosBatchResp) Reset() {
	*x = GetAlbumPhotosBatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumPhotosBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumPhotosBatchResp) ProtoMessage() {}

func (x *GetAlbumPhotosBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumPhotosBatchResp.ProtoReflect.Descriptor instead.
func (*GetAlbumPhotosBatchResp) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{10}
}

func (x *GetAlbumPhotosBatchResp) GetPhotosMap() map[uint64]*PhotoList {
	if x != nil {
		return x.PhotosMap
	}
	return nil
}

type DeleteAlbumPhotosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PhotoId []uint64 `protobuf:"varint,2,rep,packed,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
}

func (x *DeleteAlbumPhotosReq) Reset() {
	*x = DeleteAlbumPhotosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlbumPhotosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlbumPhotosReq) ProtoMessage() {}

func (x *DeleteAlbumPhotosReq) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlbumPhotosReq.ProtoReflect.Descriptor instead.
func (*DeleteAlbumPhotosReq) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteAlbumPhotosReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DeleteAlbumPhotosReq) GetPhotoId() []uint64 {
	if x != nil {
		return x.PhotoId
	}
	return nil
}

type DeleteAlbumPhotosResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAlbumPhotosResp) Reset() {
	*x = DeleteAlbumPhotosResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlbumPhotosResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlbumPhotosResp) ProtoMessage() {}

func (x *DeleteAlbumPhotosResp) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlbumPhotosResp.ProtoReflect.Descriptor instead.
func (*DeleteAlbumPhotosResp) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{12}
}

type GetAlbumPhotoCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetAlbumPhotoCountReq) Reset() {
	*x = GetAlbumPhotoCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumPhotoCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumPhotoCountReq) ProtoMessage() {}

func (x *GetAlbumPhotoCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumPhotoCountReq.ProtoReflect.Descriptor instead.
func (*GetAlbumPhotoCountReq) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{13}
}

func (x *GetAlbumPhotoCountReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetAlbumPhotoCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAlbumPhotoCountResp) Reset() {
	*x = GetAlbumPhotoCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumPhotoCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumPhotoCountResp) ProtoMessage() {}

func (x *GetAlbumPhotoCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumPhotoCountResp.ProtoReflect.Descriptor instead.
func (*GetAlbumPhotoCountResp) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{14}
}

func (x *GetAlbumPhotoCountResp) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type OtherUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *avatar.DownloadUrl `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *OtherUrl) Reset() {
	*x = OtherUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_album_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherUrl) ProtoMessage() {}

func (x *OtherUrl) ProtoReflect() protoreflect.Message {
	mi := &file_album_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherUrl.ProtoReflect.Descriptor instead.
func (*OtherUrl) Descriptor() ([]byte, []int) {
	return file_album_proto_rawDescGZIP(), []int{15}
}

func (x *OtherUrl) GetUrl() *avatar.DownloadUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

var File_album_proto protoreflect.FileDescriptor

var file_album_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x22, 0x5b, 0x0a,
	0x07, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x45, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x89, 0x02,
	0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x69, 0x0a, 0x0f,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74,
	0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x40, 0x0a, 0x12, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x05, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x25, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x60, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x4d, 0x61, 0x70, 0x1a, 0x62, 0x0a, 0x0e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x22, 0x17, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x44, 0x0a, 0x08, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x2a, 0x40, 0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x42, 0x55, 0x4d,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x32, 0xd1, 0x05, 0x0a, 0x05, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x70, 0x0a, 0x0f, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x2d,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12,
	0x2c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7c, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x31, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x76, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12,
	0x2f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x30, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69,
	0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0d, 0x5a,
	0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_album_proto_rawDescOnce sync.Once
	file_album_proto_rawDescData = file_album_proto_rawDesc
)

func file_album_proto_rawDescGZIP() []byte {
	file_album_proto_rawDescOnce.Do(func() {
		file_album_proto_rawDescData = protoimpl.X.CompressGZIP(file_album_proto_rawDescData)
	})
	return file_album_proto_rawDescData
}

var file_album_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_album_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_album_proto_goTypes = []interface{}{
	(AlbumPrivacy)(0),               // 0: gather.toolkitcl.protocol.AlbumPrivacy
	(*GetAlbumUploadUrlReq)(nil),    // 1: gather.toolkitcl.protocol.GetAlbumUploadUrlReq
	(*UrlInfo)(nil),                 // 2: gather.toolkitcl.protocol.UrlInfo
	(*GetAlbumUploadUrlResp)(nil),   // 3: gather.toolkitcl.protocol.GetAlbumUploadUrlResp
	(*SaveAlbumPhotosReq)(nil),      // 4: gather.toolkitcl.protocol.SaveAlbumPhotosReq
	(*SaveAlbumPhotosResp)(nil),     // 5: gather.toolkitcl.protocol.SaveAlbumPhotosResp
	(*Photo)(nil),                   // 6: gather.toolkitcl.protocol.Photo
	(*GetAlbumPhotosReq)(nil),       // 7: gather.toolkitcl.protocol.GetAlbumPhotosReq
	(*GetAlbumPhotosResp)(nil),      // 8: gather.toolkitcl.protocol.GetAlbumPhotosResp
	(*GetAlbumPhotosBatchReq)(nil),  // 9: gather.toolkitcl.protocol.GetAlbumPhotosBatchReq
	(*PhotoList)(nil),               // 10: gather.toolkitcl.protocol.PhotoList
	(*GetAlbumPhotosBatchResp)(nil), // 11: gather.toolkitcl.protocol.GetAlbumPhotosBatchResp
	(*DeleteAlbumPhotosReq)(nil),    // 12: gather.toolkitcl.protocol.DeleteAlbumPhotosReq
	(*DeleteAlbumPhotosResp)(nil),   // 13: gather.toolkitcl.protocol.DeleteAlbumPhotosResp
	(*GetAlbumPhotoCountReq)(nil),   // 14: gather.toolkitcl.protocol.GetAlbumPhotoCountReq
	(*GetAlbumPhotoCountResp)(nil),  // 15: gather.toolkitcl.protocol.GetAlbumPhotoCountResp
	(*OtherUrl)(nil),                // 16: gather.toolkitcl.protocol.OtherUrl
	nil,                             // 17: gather.toolkitcl.protocol.SaveAlbumPhotosResp.PhotoIdResultEntry
	nil,                             // 18: gather.toolkitcl.protocol.GetAlbumPhotosBatchResp.PhotosMapEntry
	(*avatar.DownloadUrl)(nil),      // 19: gather.toolkitcl.protocol.DownloadUrl
}
var file_album_proto_depIdxs = []int32{
	2,  // 0: gather.toolkitcl.protocol.GetAlbumUploadUrlResp.upload_url:type_name -> gather.toolkitcl.protocol.UrlInfo
	2,  // 1: gather.toolkitcl.protocol.SaveAlbumPhotosResp.download_url:type_name -> gather.toolkitcl.protocol.UrlInfo
	17, // 2: gather.toolkitcl.protocol.SaveAlbumPhotosResp.photo_id_result:type_name -> gather.toolkitcl.protocol.SaveAlbumPhotosResp.PhotoIdResultEntry
	6,  // 3: gather.toolkitcl.protocol.GetAlbumPhotosResp.photo_info:type_name -> gather.toolkitcl.protocol.Photo
	6,  // 4: gather.toolkitcl.protocol.PhotoList.photo_info:type_name -> gather.toolkitcl.protocol.Photo
	18, // 5: gather.toolkitcl.protocol.GetAlbumPhotosBatchResp.photos_map:type_name -> gather.toolkitcl.protocol.GetAlbumPhotosBatchResp.PhotosMapEntry
	19, // 6: gather.toolkitcl.protocol.OtherUrl.url:type_name -> gather.toolkitcl.protocol.DownloadUrl
	10, // 7: gather.toolkitcl.protocol.GetAlbumPhotosBatchResp.PhotosMapEntry.value:type_name -> gather.toolkitcl.protocol.PhotoList
	1,  // 8: gather.toolkitcl.protocol.Album.GetAlbumUploadUrl:input_type -> gather.toolkitcl.protocol.GetAlbumUploadUrlReq
	4,  // 9: gather.toolkitcl.protocol.Album.SaveAlbumPhotos:input_type -> gather.toolkitcl.protocol.SaveAlbumPhotosReq
	7,  // 10: gather.toolkitcl.protocol.Album.GetAlbumPhotos:input_type -> gather.toolkitcl.protocol.GetAlbumPhotosReq
	9,  // 11: gather.toolkitcl.protocol.Album.GetAlbumPhotosBatch:input_type -> gather.toolkitcl.protocol.GetAlbumPhotosBatchReq
	12, // 12: gather.toolkitcl.protocol.Album.DeleteAlbumPhotos:input_type -> gather.toolkitcl.protocol.DeleteAlbumPhotosReq
	14, // 13: gather.toolkitcl.protocol.Album.GetAlbumPhotoCount:input_type -> gather.toolkitcl.protocol.GetAlbumPhotoCountReq
	3,  // 14: gather.toolkitcl.protocol.Album.GetAlbumUploadUrl:output_type -> gather.toolkitcl.protocol.GetAlbumUploadUrlResp
	5,  // 15: gather.toolkitcl.protocol.Album.SaveAlbumPhotos:output_type -> gather.toolkitcl.protocol.SaveAlbumPhotosResp
	8,  // 16: gather.toolkitcl.protocol.Album.GetAlbumPhotos:output_type -> gather.toolkitcl.protocol.GetAlbumPhotosResp
	11, // 17: gather.toolkitcl.protocol.Album.GetAlbumPhotosBatch:output_type -> gather.toolkitcl.protocol.GetAlbumPhotosBatchResp
	13, // 18: gather.toolkitcl.protocol.Album.DeleteAlbumPhotos:output_type -> gather.toolkitcl.protocol.DeleteAlbumPhotosResp
	15, // 19: gather.toolkitcl.protocol.Album.GetAlbumPhotoCount:output_type -> gather.toolkitcl.protocol.GetAlbumPhotoCountResp
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_album_proto_init() }
func file_album_proto_init() {
	if File_album_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_album_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumUploadUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumUploadUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAlbumPhotosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAlbumPhotosResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumPhotosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumPhotosResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumPhotosBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumPhotosBatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAlbumPhotosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAlbumPhotosResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumPhotoCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumPhotoCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_album_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_album_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_album_proto_goTypes,
		DependencyIndexes: file_album_proto_depIdxs,
		EnumInfos:         file_album_proto_enumTypes,
		MessageInfos:      file_album_proto_msgTypes,
	}.Build()
	File_album_proto = out.File
	file_album_proto_rawDesc = nil
	file_album_proto_goTypes = nil
	file_album_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlbumClient is the client API for Album service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlbumClient interface {
	GetAlbumUploadUrl(ctx context.Context, in *GetAlbumUploadUrlReq, opts ...grpc.CallOption) (*GetAlbumUploadUrlResp, error)
	SaveAlbumPhotos(ctx context.Context, in *SaveAlbumPhotosReq, opts ...grpc.CallOption) (*SaveAlbumPhotosResp, error)
	GetAlbumPhotos(ctx context.Context, in *GetAlbumPhotosReq, opts ...grpc.CallOption) (*GetAlbumPhotosResp, error)
	GetAlbumPhotosBatch(ctx context.Context, in *GetAlbumPhotosBatchReq, opts ...grpc.CallOption) (*GetAlbumPhotosBatchResp, error)
	DeleteAlbumPhotos(ctx context.Context, in *DeleteAlbumPhotosReq, opts ...grpc.CallOption) (*DeleteAlbumPhotosResp, error)
	GetAlbumPhotoCount(ctx context.Context, in *GetAlbumPhotoCountReq, opts ...grpc.CallOption) (*GetAlbumPhotoCountResp, error)
}

type albumClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumClient(cc grpc.ClientConnInterface) AlbumClient {
	return &albumClient{cc}
}

func (c *albumClient) GetAlbumUploadUrl(ctx context.Context, in *GetAlbumUploadUrlReq, opts ...grpc.CallOption) (*GetAlbumUploadUrlResp, error) {
	out := new(GetAlbumUploadUrlResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Album/GetAlbumUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) SaveAlbumPhotos(ctx context.Context, in *SaveAlbumPhotosReq, opts ...grpc.CallOption) (*SaveAlbumPhotosResp, error) {
	out := new(SaveAlbumPhotosResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Album/SaveAlbumPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) GetAlbumPhotos(ctx context.Context, in *GetAlbumPhotosReq, opts ...grpc.CallOption) (*GetAlbumPhotosResp, error) {
	out := new(GetAlbumPhotosResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Album/GetAlbumPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) GetAlbumPhotosBatch(ctx context.Context, in *GetAlbumPhotosBatchReq, opts ...grpc.CallOption) (*GetAlbumPhotosBatchResp, error) {
	out := new(GetAlbumPhotosBatchResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Album/GetAlbumPhotosBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) DeleteAlbumPhotos(ctx context.Context, in *DeleteAlbumPhotosReq, opts ...grpc.CallOption) (*DeleteAlbumPhotosResp, error) {
	out := new(DeleteAlbumPhotosResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Album/DeleteAlbumPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) GetAlbumPhotoCount(ctx context.Context, in *GetAlbumPhotoCountReq, opts ...grpc.CallOption) (*GetAlbumPhotoCountResp, error) {
	out := new(GetAlbumPhotoCountResp)
	err := c.cc.Invoke(ctx, "/gather.toolkitcl.protocol.Album/GetAlbumPhotoCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServer is the server API for Album service.
type AlbumServer interface {
	GetAlbumUploadUrl(context.Context, *GetAlbumUploadUrlReq) (*GetAlbumUploadUrlResp, error)
	SaveAlbumPhotos(context.Context, *SaveAlbumPhotosReq) (*SaveAlbumPhotosResp, error)
	GetAlbumPhotos(context.Context, *GetAlbumPhotosReq) (*GetAlbumPhotosResp, error)
	GetAlbumPhotosBatch(context.Context, *GetAlbumPhotosBatchReq) (*GetAlbumPhotosBatchResp, error)
	DeleteAlbumPhotos(context.Context, *DeleteAlbumPhotosReq) (*DeleteAlbumPhotosResp, error)
	GetAlbumPhotoCount(context.Context, *GetAlbumPhotoCountReq) (*GetAlbumPhotoCountResp, error)
}

// UnimplementedAlbumServer can be embedded to have forward compatible implementations.
type UnimplementedAlbumServer struct {
}

func (*UnimplementedAlbumServer) GetAlbumUploadUrl(context.Context, *GetAlbumUploadUrlReq) (*GetAlbumUploadUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumUploadUrl not implemented")
}
func (*UnimplementedAlbumServer) SaveAlbumPhotos(context.Context, *SaveAlbumPhotosReq) (*SaveAlbumPhotosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAlbumPhotos not implemented")
}
func (*UnimplementedAlbumServer) GetAlbumPhotos(context.Context, *GetAlbumPhotosReq) (*GetAlbumPhotosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumPhotos not implemented")
}
func (*UnimplementedAlbumServer) GetAlbumPhotosBatch(context.Context, *GetAlbumPhotosBatchReq) (*GetAlbumPhotosBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumPhotosBatch not implemented")
}
func (*UnimplementedAlbumServer) DeleteAlbumPhotos(context.Context, *DeleteAlbumPhotosReq) (*DeleteAlbumPhotosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbumPhotos not implemented")
}
func (*UnimplementedAlbumServer) GetAlbumPhotoCount(context.Context, *GetAlbumPhotoCountReq) (*GetAlbumPhotoCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumPhotoCount not implemented")
}

func RegisterAlbumServer(s *grpc.Server, srv AlbumServer) {
	s.RegisterService(&_Album_serviceDesc, srv)
}

func _Album_GetAlbumUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumUploadUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).GetAlbumUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Album/GetAlbumUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).GetAlbumUploadUrl(ctx, req.(*GetAlbumUploadUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_SaveAlbumPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAlbumPhotosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).SaveAlbumPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Album/SaveAlbumPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).SaveAlbumPhotos(ctx, req.(*SaveAlbumPhotosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_GetAlbumPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumPhotosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).GetAlbumPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Album/GetAlbumPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).GetAlbumPhotos(ctx, req.(*GetAlbumPhotosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_GetAlbumPhotosBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumPhotosBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).GetAlbumPhotosBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Album/GetAlbumPhotosBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).GetAlbumPhotosBatch(ctx, req.(*GetAlbumPhotosBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_DeleteAlbumPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumPhotosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).DeleteAlbumPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Album/DeleteAlbumPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).DeleteAlbumPhotos(ctx, req.(*DeleteAlbumPhotosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_GetAlbumPhotoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumPhotoCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).GetAlbumPhotoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.toolkitcl.protocol.Album/GetAlbumPhotoCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).GetAlbumPhotoCount(ctx, req.(*GetAlbumPhotoCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Album_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gather.toolkitcl.protocol.Album",
	HandlerType: (*AlbumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbumUploadUrl",
			Handler:    _Album_GetAlbumUploadUrl_Handler,
		},
		{
			MethodName: "SaveAlbumPhotos",
			Handler:    _Album_SaveAlbumPhotos_Handler,
		},
		{
			MethodName: "GetAlbumPhotos",
			Handler:    _Album_GetAlbumPhotos_Handler,
		},
		{
			MethodName: "GetAlbumPhotosBatch",
			Handler:    _Album_GetAlbumPhotosBatch_Handler,
		},
		{
			MethodName: "DeleteAlbumPhotos",
			Handler:    _Album_DeleteAlbumPhotos_Handler,
		},
		{
			MethodName: "GetAlbumPhotoCount",
			Handler:    _Album_GetAlbumPhotoCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "album.proto",
}
